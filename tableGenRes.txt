
Result:
read EQUAL (
write EQUAL (
; LOWER read
; LOWER write
; LOWER ;
, HIGHER )
, HIGHER )
, LOWER id
( EQUAL )
( EQUAL )
( LOWER id
( LOWER id
) HIGHER ;
id EQUAL ,
id HIGHER )
id HIGHER )

Result:
program HIGHER ;
program LOWER id
var EQUAL :
var LOWER id
then LOWER for
then LOWER for
then LOWER read
then LOWER read
then LOWER write
then LOWER write
then HIGHER .
then LOWER id
then LOWER id
then LOWER begin
then LOWER begin
then HIGHER end
then LOWER if
then LOWER if
then EQUAL else
then HIGHER else
for LOWER to
for LOWER downto
for EQUAL do
for LOWER id
to HIGHER do
to LOWER +
to LOWER -
to LOWER *
to LOWER div
to LOWER mod
to LOWER (
to LOWER =
to LOWER <>
to LOWER >
to LOWER <
to LOWER <=
to LOWER >=
to LOWER not
to LOWER or
to LOWER and
to LOWER id
to LOWER lit
downto HIGHER do
downto LOWER +
downto LOWER -
downto LOWER *
downto LOWER div
downto LOWER mod
downto LOWER (
downto LOWER =
downto LOWER <>
downto LOWER >
downto LOWER <
downto LOWER <=
downto LOWER >=
downto LOWER not
downto LOWER or
downto LOWER and
downto LOWER id
downto LOWER lit
do HIGHER .
do LOWER begin
do HIGHER end
do HIGHER else
read EQUAL (
write EQUAL (
:= HIGHER to
:= HIGHER downto
:= LOWER +
:= LOWER -
:= LOWER *
:= LOWER div
:= LOWER mod
:= HIGHER .
:= LOWER (
:= LOWER =
:= LOWER <>
:= LOWER >
:= LOWER <
:= LOWER <=
:= LOWER >=
:= LOWER not
:= LOWER or
:= LOWER and
:= LOWER id
:= LOWER lit
:= HIGHER end
:= HIGHER else
+ HIGHER then
+ HIGHER then
+ HIGHER to
+ HIGHER downto
+ HIGHER do
+ LOWER +
+ LOWER -
+ LOWER *
+ LOWER *
+ LOWER div
+ LOWER div
+ LOWER mod
+ LOWER mod
+ HIGHER .
+ LOWER (
+ LOWER (
+ HIGHER )
+ LOWER id
+ LOWER id
+ LOWER lit
+ LOWER lit
+ HIGHER end
+ HIGHER else
integer HIGHER ;
- HIGHER then
- HIGHER then
- HIGHER to
- HIGHER downto
- HIGHER do
- LOWER +
- LOWER -
- LOWER *
- LOWER *
- LOWER div
- LOWER div
- LOWER mod
- LOWER mod
- HIGHER .
- LOWER (
- LOWER (
- HIGHER )
- LOWER id
- LOWER id
- LOWER lit
- LOWER lit
- HIGHER end
- HIGHER else
* HIGHER then
* HIGHER then
* HIGHER to
* HIGHER downto
* HIGHER do
* LOWER *
* LOWER div
* LOWER mod
* HIGHER .
* LOWER (
* LOWER (
* LOWER (
* HIGHER )
* LOWER id
* LOWER id
* LOWER id
* LOWER lit
* LOWER lit
* LOWER lit
* HIGHER end
* HIGHER else
div HIGHER then
div HIGHER then
div HIGHER to
div HIGHER downto
div HIGHER do
div LOWER *
div LOWER div
div LOWER mod
div HIGHER .
div LOWER (
div LOWER (
div LOWER (
div HIGHER )
div LOWER id
div LOWER id
div LOWER id
div LOWER lit
div LOWER lit
div LOWER lit
div HIGHER end
div HIGHER else
mod HIGHER then
mod HIGHER then
mod HIGHER to
mod HIGHER downto
mod HIGHER do
mod LOWER *
mod LOWER div
mod LOWER mod
mod HIGHER .
mod LOWER (
mod LOWER (
mod LOWER (
mod HIGHER )
mod LOWER id
mod LOWER id
mod LOWER id
mod LOWER lit
mod LOWER lit
mod LOWER lit
mod HIGHER end
mod HIGHER else
; LOWER var
; LOWER for
; LOWER for
; LOWER read
; LOWER read
; LOWER write
; LOWER write
; EQUAL ;
; LOWER ;
; EQUAL .
; EQUAL :
; LOWER id
; LOWER id
; LOWER id
; LOWER begin
; HIGHER end
; LOWER if
; LOWER if
, EQUAL id
( LOWER +
( LOWER -
( LOWER *
( LOWER div
( LOWER mod
( LOWER (
( EQUAL )
( EQUAL )
( EQUAL )
( LOWER =
( LOWER <>
( LOWER >
( LOWER <
( LOWER <=
( LOWER >=
( LOWER not
( LOWER or
( LOWER and
( LOWER id
( LOWER id
( LOWER id
( LOWER lit
) HIGHER then
) HIGHER then
) HIGHER to
) HIGHER downto
) HIGHER do
) HIGHER .
) HIGHER )
) HIGHER end
) HIGHER else
: LOWER integer
: LOWER integer
: LOWER ;
: LOWER ;
: HIGHER ;
: LOWER real
: LOWER real
: LOWER char
: LOWER char
: LOWER string
: LOWER string
real HIGHER ;
= HIGHER then
= HIGHER then
= HIGHER to
= HIGHER downto
= HIGHER do
= HIGHER .
= HIGHER )
= HIGHER end
= HIGHER else
<> HIGHER then
<> HIGHER then
<> HIGHER to
<> HIGHER downto
<> HIGHER do
<> HIGHER .
<> HIGHER )
<> HIGHER end
<> HIGHER else
> HIGHER then
> HIGHER then
> HIGHER to
> HIGHER downto
> HIGHER do
> HIGHER .
> HIGHER )
> HIGHER end
> HIGHER else
< HIGHER then
< HIGHER then
< HIGHER to
< HIGHER downto
< HIGHER do
< HIGHER .
< HIGHER )
< HIGHER end
< HIGHER else
<= HIGHER then
<= HIGHER then
<= HIGHER to
<= HIGHER downto
<= HIGHER do
<= HIGHER .
<= HIGHER )
<= HIGHER end
<= HIGHER else
>= HIGHER then
>= HIGHER then
>= HIGHER to
>= HIGHER downto
>= HIGHER do
>= HIGHER .
>= HIGHER )
>= HIGHER end
>= HIGHER else
not HIGHER then
not HIGHER then
not HIGHER to
not HIGHER downto
not HIGHER do
not LOWER +
not LOWER +
not LOWER -
not LOWER -
not LOWER *
not LOWER *
not LOWER div
not LOWER div
not LOWER mod
not LOWER mod
not HIGHER .
not LOWER (
not LOWER (
not HIGHER )
not LOWER =
not LOWER =
not LOWER <>
not LOWER <>
not LOWER >
not LOWER >
not LOWER <
not LOWER <
not LOWER <=
not LOWER <=
not LOWER >=
not LOWER >=
not LOWER not
not LOWER not
not LOWER or
not LOWER and
not LOWER id
not LOWER id
not LOWER lit
not LOWER lit
not HIGHER end
not HIGHER else
or HIGHER then
or HIGHER then
or HIGHER to
or HIGHER downto
or HIGHER do
or HIGHER .
or HIGHER )
or HIGHER end
or HIGHER else
and HIGHER then
and HIGHER then
and HIGHER to
and HIGHER downto
and HIGHER do
and HIGHER .
and HIGHER )
and HIGHER end
and HIGHER else
id HIGHER then
id HIGHER then
id HIGHER to
id HIGHER downto
id HIGHER do
id EQUAL :=
id HIGHER ;
id LOWER ,
id LOWER ,
id HIGHER .
id HIGHER )
id HIGHER )
id HIGHER )
id HIGHER :
id HIGHER :
id HIGHER end
id HIGHER else
char HIGHER ;
lit HIGHER then
lit HIGHER then
lit HIGHER to
lit HIGHER downto
lit HIGHER do
lit HIGHER .
lit HIGHER )
lit HIGHER end
lit HIGHER else
string HIGHER ;
begin LOWER for
begin LOWER read
begin LOWER write
begin LOWER ;
begin LOWER id
begin EQUAL end
begin LOWER if
end HIGHER .
end HIGHER end
end HIGHER else
if EQUAL then
if EQUAL then
if LOWER +
if LOWER +
if LOWER -
if LOWER -
if LOWER *
if LOWER *
if LOWER div
if LOWER div
if LOWER mod
if LOWER mod
if LOWER (
if LOWER (
if LOWER =
if LOWER =
if LOWER <>
if LOWER <>
if LOWER >
if LOWER >
if LOWER <
if LOWER <
if LOWER <=
if LOWER <=
if LOWER >=
if LOWER >=
if LOWER not
if LOWER not
if LOWER or
if LOWER or
if LOWER and
if LOWER and
if LOWER id
if LOWER id
if LOWER lit
if LOWER lit
else LOWER for
else LOWER read
else LOWER write
else HIGHER .
else LOWER id
else LOWER begin
else HIGHER end
else LOWER if
else HIGHER else

Conflicts found:
then | else
: | ;
; | ;
